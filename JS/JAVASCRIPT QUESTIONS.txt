
	::	JAVASCRIPT QUESTIONS	::

#	What is js ? And where it is commmonly used ?
Answer: JavaScript (JS) is a high-level, interpreted programming language primarily used to create dynamic and interactive web applications. 
	It is a single-threaded, dynamically typed, and event-driven language that runs in the browser as well as on the server using environments like Node.js. 
	
	Key Features:
	Dynamically Typed:
		In JavaScript, you don’t need to specify a variable's type (like number or string). 
		JS is a dynamically typed language which means that data-type of variables are determined by the value they hold at a runtime.						Also, you can change the type later by assigning a different value.
	
	Interpreted Language: 
		JavaScript is an interpreted language, meaning its code is executed line by line by the JavaScript engine. 
		modern JavaScript engines like V8 (Chrome, Node.js) use Just-In-Time (JIT) compilation which compiled JS code into machine code at runtime, 
		rather than being fully compiled before execution.
	
	Single-Threaded: 
		because it executes one task at a time in a single execution thread. (using a call stack)
-----------------------------------------------------------------------------------------------------------------------------------------------
#	What are the different data-types in JavaScript ? 
Answer: Mainly there are two types of data-type Primitive and Non-Primitive Data-Type also known as Reference Type .
	
	Primitive data-types : 
		Primitive data-type represent a single value. They are immutable which means their values cannot be changed once assigned
		These types are directly stored in memory. 
		Primitive data-types are : string, number, boolean, undefined, null, symbol, and bigint.
	
	Non-Primitive Data-Type :
		Non-primitive data types are more complex and are used to store collections of values. 
		They are mutable, meaning their values can be changed after creation. 
		These data types do not store the actual value but instead store a reference to the memory location where the value is stored.
		Non-Primitive data-types are : Array, Object, Function etc

	The seven Primitive Data Types are:
	1. Stings: Represents text enclosed in quotes.
	2. Numbers: Represents numeric values.
	3. Booleans:  Represents true or false.
	4. Undefined: A variable declared but not assigned a value.
	5. Null: Represents an intentional absence of value.
	6. Symbol:  Represents unique and immutable values.
	7. BigInt: Used for large integers beyond Number.MAX_SAFE_INTEGER.
-----------------------------------------------------------------------------------------------------------------------------------------------
#	What is variable ? Explain var, let, and const ?
Answer:  variable is used to store data. var , let and const used for variable declaration in js.

	var: 
	    var is function-scoped variable, 
	    var are hoisted, 
	    var can be re-assign and re-define.
	    var binds to this keyword. 

	let: 
	    let is Block-scope variable, 
	    let can-not be hoisted,
	    let can-not be re-declare but let can be reassign.
	    let can-not binds to this keyword.	

	const: 
	      const is Block-scope variable, 
	      const can-not be hoisted,
	      const can-not be re-declare and reassign,	
	      const can-not binds to this keyword,
	      const can be assign only once, and its value can-not be changed afterwards.
----------------------------------------------------------------------------------------------------------------------------------------------- 
#	What is the difference between == and === ?
Answer: In JavaScript, == is the loose equality operator, which compares two values for equality after performing type coercion if necessary. 
        This means it converts the operands to the same type before comparing.

	=== is the strict equality operator, which compares both the values and their types, without performing type conversion.

	Note : Type coercion means automatically converting one data type to another when necessary if the data types don't match.
-----------------------------------------------------------------------------------------------------------------------------------------------
# 	What is scope in javascript ?
Answer:  "scope" refers to the context in which variables and functions are declared and accessed. 
	It defines the visibility and accessibility of these variables and functions within the code. 
	scope is crucial for managing the lifecycle and behaviour of variables and functions in a program.

	Types of Scope in JavaScript - 
	  1. Global Scope :
		Variables declared outside any function or block belong to the global scope and can be accessed anywhere in the code.
	  2. Function (Local) Scope :
		Variables declared inside a function are only accessible within that function.
	  3. Block Scope (let & const) :
		let and const have block scope, meaning they are accessible only within the block ({}) where they are declared.
	  4. Lexical Scope (Closures) :
		Inner functions inherit variables from their outer function scope (closure).
-----------------------------------------------------------------------------------------------------------------------------------------------
#	What is the difference between null and undefined ?
Answer: Undfined : Undfined is automatically assigned to a variable that has been declared but not assigned a value.
		   It indicates that the variable exists but has not been initialized yet.
	
	Null : Null represent intetional absence of any value. 
		We use NUll when we don't want to assign any value to a variable if we want to assign it later.
-----------------------------------------------------------------------------------------------------------------------------------------------
#	What are Template Literals in JavaScript?
Answer: Template Literals (also called Template Strings) in JavaScript denoted with ``(backticks), 
	By using Template Literals we can easily concatenate strings. provide a cleaner and more readable way to work with strings.
	With Template Literals, you can easily include variables and expressions directly in strings using ${}
	All we have to do is put the expression inside ‘${}’. without needing to use the + operator for concatenation.
-----------------------------------------------------------------------------------------------------------------------------------------------
#	What is the use of Object.freeze?
Answer: Object.freeze is used if we want to freeze or fix the values of an object so that it cannot be changed or modified.
-----------------------------------------------------------------------------------------------------------------------------------------------
#	What is NaN property in JavaScript?
Answer: NaN (Not-a-Number) is a special property in JavaScript that represents a value that is not a valid number
	Even though NaN means "Not-a-Number", its type is still "number".

#	How can you check if a value is NaN?
Answer: Use isNaN() or Number.isNaN() to check if a value is NaN.

	 Difference:
		isNaN(value) tries to convert the value into a number before checking.
		Number.isNaN(value) strictly checks if the value is NaN without conversion (better choice).

#	What happens when you compare NaN with any other value?
Answer: NaN is not equal to any value, including itself.

#	How does isNaN() behave differently from Number.isNaN()?
Answer: isNaN(value) tries to convert the value to a number before checking, while Number.isNaN(value) does a strict check.

-----------------------------------------------------------------------------------------------------------------------------------------------
#	What is the use of the isNaN function ?
Answer: As a name suggest is Not a Number function checks if given value is not a Number. If the output cannot be coersed or converted into a number
	then isNaN returns True ,(Although type of NaN is Number it still treated as a number.
-----------------------------------------------------------------------------------------------------------------------------------------------
#	Use of typeof operator ?
Answer: The typeof operator in JavaScript is used to determine the type of a given value or a variable and It returns a string.
	It helps in type checking during debugging or handling data differntly based on its type.
-----------------------------------------------------------------------------------------------------------------------------------------------
#	What is Hoisting ?
Answer: In case of any other programming languages calling a function or variable it is declared will throw an error. But due to weird nature of js,
	this will actually execute the code print the output as well. This phenominon is called as Hoisting. 
	 Hoisting is a JavaScript behavior where variable and function declarations are moved/hoisted to the top of their scope before execution. 
	This means we can use functions and variables before declaring them in the code.

	Key Points About Hoisting
		Variables declared with var are hoisted but initialized as undefined.
		Variables declared with let and const are hoisted but not initialized.
		Function declarations are fully hoisted, but function expressions are not.
		Always declare variables at the top to avoid unexpected behavior.
-----------------------------------------------------------------------------------------------------------------------------------------------
#	What is the purpose of closures ?
Answer: A closure in JavaScript allows a function to remember and access variables from its outer scope, even after the outer function has finished executing.

	:: Purpose of Closures ::
	1. Data Encapsulation (Private Variables) :
		Closures help create private variables that cannot be accessed directly from outside.
	2. Event Handlers & Callbacks :
		Closures are commonly used in event listeners to preserve values.
 
-----------------------------------------------------------------------------------------------------------------------------------------------
#	What is a Temporal Dead Zone ?
Answer: The Temporal Dead Zone (TDZ) is the time between the start of a block and when a variable is declared using let or const.
	Accessing the variable before its declaration results in a ReferenceError.( During this time, trying to access the variable throws a ReferenceError)

#	Do var variables have a Temporal Dead Zone?
Answer: No! var does not have a TDZ because it is hoisted and initialized as undefined.

#	 Why does accessing a let or const variable before declaration cause a ReferenceError?
Answer: let and const variables are hoisted, but they are not initialized until their declaration.
	This means they exist in the Temporal Dead Zone (TDZ) until the code reaches their declaration.
	Accessing them before declaration results in a ReferenceError.

#	How long does the TDZ last for a let or const variable?
Answer: The TDZ starts when the scope is entered and ends when the variable is declared.

#	What happens if you use a let variable before its declaration inside a function?
Answer: The variable will be in the TDZ, and accessing it before declaration causes a ReferenceError.
-----------------------------------------------------------------------------------------------------------------------------------------------
#	What is the this keyword ?
Answer: this keyword represent current instance of an object.
	The this keyword refers to the object that is currently executing the code. Its value is
	determined by how a function is called, and it provides a way to access object properties and
	methods within a function
	
	 Note -->
		 this does not always represent an object’s current instance.
		 Its behavior depends on how and where the function is invoked.
		 Arrow functions do not have their own this.
		 Instead, they inherit this from the surrounding lexical scope (the context in which they were defined)

-----------------------------------------------------------------------------------------------------------------------------------------------
#	What is the difference between function declarations and function expressions ?
Answer: Function Declaration:
	 	A function declaration is a statement that defines a function in JavaScript. 
	 	It is hoisted to the top of its scope, meaning the function can be called before its actual definition in the code.	

	Function Expression:
		A function expression defines a function as part of an expression and assigns it to a variable. 
		It does not get hoisted in the same way as function declarations.

#	What is arrow function ?
Answer: An arrow function (=>) is a shorter and more concise way to write functions in JavaScript. It was introduced in ES6 and provides a 
	cleaner syntax compared to traditional functions.
	
	Arrow functions do not create their own this; they inherit this from their surrounding scope.

#	 What is an arrow function, and how is it different from a normal function?
Answer: An arrow function (=>) is a shorter way to write functions in JavaScript. It does not have its own this, arguments, or prototype, 
	making it different from a normal function.

#	Can an arrow function be used as a constructor?
Answer: No, arrow functions cannot be used as constructors because they do not have a prototype.

#	Can you use an arrow function inside an object method?
Answer:	No, because arrow functions do not have their own this.

#	When should you not use arrow functions?
Answer: Avoid using arrow functions in the following cases:

	Object Methods (because this does not refer to the object).
	As Constructors (because they do not support new).
	When arguments is needed (since arrow functions do not have it).
	When using this dynamically (like event handlers).
-----------------------------------------------------------------------------------------------------------------------------------------------
#	What is an IIFE (Immediately Invoked Function Expression) ?
Answer: A Self-Invoking Function (also called an Immediately Invoked Function Expression (IIFE)) is a function that executes 
	immediately after being defined, without needing to be called separately.

	Explanation:
		The function is wrapped inside parentheses to make it an expression.
		The () at the end immediately invokes (calls) the function.

#	Why Use a Self-Invoking Function ?
Answer: To avoid Polluting the Global Scope :
		Variables inside an IIFE cannot be accessed outside, keeping the global scope clean.
-----------------------------------------------------------------------------------------------------------------------------------------------

# 	What is a higher order function ?
Answer: A Higher-Order Function (HOF) is a function that takes another function as an argument or returns a function as its result.
	Built-in Higher-Order Functions in JavaScript are map(), filter(), reduce(), forEach(), etc. (because they take callback functions as arguments)


# 	What is the currying function ?
Answer: 


# What is a pure function ?






-----------------------------------------------------------------------------------------------------------------------------------------------

  

#	What are generator functions in Javascript?
Answer: In JavaScript, generator functions are a special kind of function that allows you to control the execution flow and pause/resume it at
	certain points. Generator functions are defined using the syntax and use the keyword to produce a sequence of values.
	When a generator function is called, it returns an iterator called a generator.

	:: Key Features of Generator Functions:
	  Defined with the function* Syntax:
		Generator functions are defined using function* instead of function.

	yield Keyword:
	  The yield keyword is used to pause the execution of the function and return a value. Each time the generator function is called, 
	  it resumes execution from where it last left off.

	Returns an Iterator:
	  Calling a generator function returns a generator object, which is an iterator. This iterator can be used to control the flow of the function 
	   using methods like .next(). 
-----------------------------------------------------------------------------------------------------------------------------------------------
#	What are prototypes in Javascript?
Answer: Every object in JavaScript has a prototype, which acts as a blueprint for shared properties and methods.
	When you try to access a property or method on an object, JavaScript first checks the object itself.
	If it's not found, it looks up the prototype chain




What is the difference between map(), forEach(), filter(), and reduce()?
-----------------------------------------------------------------------------------------------------------------------------------------------
What are Promises, and how do they work? 
-----------------------------------------------------------------------------------------------------------------------------------------------
What is async/await? How is it different from Promises? 
-----------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------
What is event delegation? 

What are JavaScript modules?
-----------------------------------------------------------------------------------------------------------------------------------------------
Why do we use the word “debugger” in javascript?
-----------------------------------------------------------------------------------------------------------------------------------------------
Explain Implicit Type Coercion in javascript.
-----------------------------------------------------------------------------------------------------------------------------------------------
Is javascript a statically typed or a dynamically typed language?
-----------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------
Explain passed by value and passed by reference.
-----------------------------------------------------------------------------------------------------------------------------------------------
What is an Immediately Invoked Function in JavaScript?
-----------------------------------------------------------------------------------------------------------------------------------------------
What do you mean by strict mode in javascript and characteristics of javascript strict-mode?
-----------------------------------------------------------------------------------------------------------------------------------------------
What is the event loop in JavaScript?
-----------------------------------------------------------------------------------------------------------------------------------------------
What is the difference between synchronous and asynchronous programming?
-----------------------------------------------------------------------------------------------------------------------------------------------
Explain immutability and why it's important.
-----------------------------------------------------------------------------------------------------------------------------------------------
How is memory managed in JavaScript?
-----------------------------------------------------------------------------------------------------------------------------------------------
What is the difference between prototypal inheritance and classical inheritance?

What is the difference between call(), apply(), and bind()?

-----------------------------------------------------------------------------------------------------------------------------------------------
What is event delegation? 
-----------------------------------------------------------------------------------------------------------------------------------------------

  


What is the difference between exec () and test () methods in javascript?

What is currying in JavaScript?

What are some advantages of using External JavaScript ?

What are object prototypes?

What are callbacks?

What are the types of errors in javascript?

What is memoization?

What is recursion in a programming language?

What is the use of a constructor function in javascript?

What is DOM?

Which method is used to retrieve a character from a certain index?

What do you mean by BOM?

What is the distinction between client-side and server-side JavaScript?

What is the rest parameter and spread operator?

In JavaScript, how many different methods can you make an object?

What are classes in javascript?

Explain WeakSet in javascript.

Explain WeakMap in javascript.

What is Object Destructuring?

Difference between prototypal and classical inheritance


What do you mean by JavaScript Design Patterns?

Is JavaScript a pass-by-reference or pass-by-value language?

What is the role of deferred scripts in JavaScript?

What has to be done in order to put Lexical Scoping into practice?

What is Bubbling and Capturing?

What is the difference between for..of and for..in?

What is the reason behind adding Symbol to ES6?

What is Babel?

Name some array methods that were introduced in ES6

Name some string functions introduced in ES6.

Compare the ES5 and ES6 codes for object initialization and parsing returned objects.

How do you use Destructuring Assignment to swap variables?

What is the result of the spread operator array shown below?

 Which keyword can be used to deploy inheritance in ES6?

Explain the Rest parameter in ES6.

What are the object oriented features supported in ES6.


What is the “spread” operator in ES6?

Explain Destructuring in ES6.

What are Promises in ES6?

Mention some popular features of ES6.

How can you create a class in ES6?

What is a class expression?

What do you understand about default parameters?

What are the states of Promises in ES6?

What is Export Default and Named Export in ES6?


What is a WeakMap in ES6? How is it different from a Map?

What is the advantage of using the arrow syntax for a constructor method?

What is the difference between Set and WeakSet in ES6?

What are Proxy in ES6?

What is the difference between const and Object.freeze().

Explain Internationalization and Localization.

What is Webpack?

# Is JavaScript a compiled or interpreted language ?
# Is there any relation between Java and JavaScript ?
# What is ECMAScript ?
# What is V8 JavaScript engine ?
# Why do we call javascript as dynamic language ?
# What is an event loop ?
# What is call stack ?
# What is an event queue ?
# What is global execution context ?
# What is function execution context ?
# What are template literals ?
# What are the differences between primitives and non-primitives ?
# What is the Temporal Dead Zone ?
# What is a rest parameter ?
# What is a spread operator ?
# What are the differences between spread operator and rest parameter ?
# What are the types of loops in javascript ?
# What are the differences between for...of and for...in statements ?
# What is the difference between map and forEach functions ?
# What are the possible ways to create objects in JavaScript ?
# What is JSON and its common operations ?
# What is Array and its method ?
# What is the purpose of the array slice method ?
# What is the purpose of the array splice method ?
# What is the difference between slice and splice ?
# What is the difference between substring and substr methods ? 
# How do you combine two or more arrays ?
# What is the difference between Shallow and Deep copy ?




# What is memoization ?

# What are the differences between cookie, local storage and session storage ?
# What is a Cookie ?
# Why do you need a Cookie ?
# Why do you need web storage ?
# What is a promise ?
# Why do you need a promise ?
# What are the three states of promise ?
# What are the pros and cons of promises over callbacks ?
# What is a callback function ?
# Why do we need callbacks ?
# What is a callback hell ?
# What is promise chaining ?
# What is a strict mode in javascript ?
# Why do you need strict mode ?
# How do you declare strict mode ?

# What is eval ?
# What is the difference between window and document ?
# What is event bubbling ?
# What is event capturing ?
# How do you submit a form using JavaScript ?
# What are events ?
# What is the use of preventDefault method ?
# What is the use of stopPropagation method ?
# What is the use of setTimeout ?
# What is the use of setInterval ?
# Why is JavaScript treated as Single threaded ?
# What is JSON ?
# What are the syntax rules of JSON ?
# What is the purpose JSON stringify ?
# How do you parse JSON string ?
# Why do you need JSON ?
# What is the purpose of clearTimeout method ?
# What is the purpose of clearInterval method ?
# How do you get the current url with javascript ?
# How do you make first letter of the string in an uppercase ?
# How do you display the current date in javascript ?
# What are break and continue statements ?
# How do you change the style of a HTML element ?
# What is the difference between proto and prototype ?
# How can you get the list of keys of any object ?
# What is an anonymous function ?
# What are the advantages of Getters and Setters ?
# What is the purpose of switch-case ?
# What are primitive data types ?
# What are the different methods to find HTML elements in DOM ?
# What is debouncing ?
# What is throttling ? 
# What is optional chaining ?